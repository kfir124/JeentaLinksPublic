from flask import Blueprint, render_template, abort, make_response, flash, redirect, url_for, sessionfrom functions import fill_data, is_portal_owner, load_style, snapshot_websitefrom models import db, Portal, Website, Tabfrom flask.ext.login import login_required, current_userfrom math import ceilimport settingssimple = Blueprint('simple', __name__,                        template_folder='templates')@simple.route('/')def index():    data = fill_data()    data['rows'] = settings.tab_rows    data['items_per_row'] = settings.tab_items_per_row    resp = make_response(render_template('index.html', **data))    return resp@simple.route('/createdb/<password>')def create_db(password):    if password == 'topsecret':        db.create_all()        return 'db created :)'    else:        abort(404)        @simple.route('/picture/<url>')def picture(url):    name = snapshot_website(url)    return 'finished! %s<br /><img src="%s">' % (name, name)@simple.route('/portal/<portal_name>')def portal_viewer(portal_name, action=None):    portal = Portal.query.filter_by(name=portal_name).first()    if portal is None:            flash('couldn\'t locate a portal named %s' % portal_name, 'headermsg')            return redirect(url_for('simple.index'))    websites = portal.websites.order_by(Website.index)    data = fill_data()    data['websites'] = websites    data['portal_name'] = portal.name    data['portal_id'] = portal.id    data['tabs'] = portal.tabs.filter_by(hidden=False, deleted=False).all()    if is_portal_owner(portal):        data['is_owner'] = True        data['edit_mode'] = True    else:        #he is not the owner so i'll hide all the not shared tabs        data['tabs'] = [tab for tab in data['tabs'] if tab.shared]    style = portal.style    load_style(data, style)    return render_template('portal.html', **data)@simple.route('/tabs/<int:tab_id>')def tab_viewer(tab_id):    tab = Tab.query.get(tab_id)    if tab is None:        return 'can\'t locate tab with this id'    portal = Portal.query.get(tab.portal_id)    if portal is None:        return 'portal with such id does not exist'    if not tab.shared:        if current_user.portal.id != portal.id:            return 'this tab is not shared with you'    data = fill_data()    data['default_image'] = tab.default_image or settings.default_tab_image    data['rows'] = settings.tab_rows    data['items_per_row'] = settings.tab_items_per_row    websites = tab.websites.order_by(Website.index)    total_items = settings.tab_rows * settings.tab_items_per_row    extra_needed_rows = int(ceil((websites.count() + 1.0 - total_items) / settings.tab_items_per_row))    data['rows'] += extra_needed_rows if extra_needed_rows > 0 else 0    data['websites'] = websites    data['tab_id'] = tab_id    if is_portal_owner(portal):        data['is_owner'] = True        data['edit_mode'] = True    data['portal_name'] = portal.name    data['portal_id'] = portal.id    return render_template('get_tab.html', **data)@simple.route('/managetabs')@login_requireddef manage_tabs():    data = fill_data()    # we order by Tab.id since the first tab we should find is the default tab    # which the user shouldnt delete or hide, in the template the first tab is    # assumed to be the tab at index 0 in the tabs array so we make sure of that here    tabs = current_user.portal.tabs.filter_by(deleted=False).order_by(Tab.id)    data['tabs'] = tabs    return render_template('manage_tabs.html', **data)@simple.route('/tabimage/<int:tab_id>')@simple.route('/tabimage/<int:tab_id>/<int:last_btn>')@login_requireddef get_tabimage(tab_id, last_btn=0):    data = {}    data['last_btn'] = last_btn    tab = Tab.query.get(tab_id)    if tab is None:        return 'can\'t find this tab id'    if tab.portal_id != current_user.portal.id:        return 'you do not own this tab'    data['image_path'] = tab.default_image or settings.default_tab_image    data['tab_id'] = tab_id    return render_template('get_tabimage.html', **data)